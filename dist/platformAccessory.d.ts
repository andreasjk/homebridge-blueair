import { PlatformAccessory } from 'homebridge';
import { BlueAirHomebridgePlatform } from './platform';
export declare class BlueAirPlatformAccessory {
    private readonly platform;
    private readonly accessory;
    private AirPurifier;
    private FilterMaintenance;
    private Lightbulb;
    private AirQualitySensor;
    private TemperatureSensor;
    private HumiditySensor;
    private CarbonDioxideSensor;
    private lastquery;
    private historyService;
    constructor(platform: BlueAirHomebridgePlatform, accessory: PlatformAccessory);
    setAccessoryInformation(): Promise<false | undefined>;
    updateDevice(): Promise<boolean>;
    handleAirPurifierActiveGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleCurrentAirPurifierStateGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleTargetAirPurifierGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleLockPhysicalControlsGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleRotationSpeedGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleFilterChangeGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleFilterLifeLevelGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleOnGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleBrightnessGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handlePM25DensityGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handlePM10DensityGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleAirQualityGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleVOCDensityGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleCurrentTemperatureGet(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleCurrentRelativeHumidity(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleCarbonDioxideLevel(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleCarbonDioxidePeakLevel(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    handleCarbonDioxideDetected(): Promise<import("homebridge").Nullable<import("homebridge").CharacteristicValue>>;
    updateAccessoryCharacteristics(): Promise<boolean>;
    updateAirPurifierActiveState(): Promise<boolean>;
    updateAirPurifierCurrentAirPurifierState(): Promise<boolean>;
    updateAirPurifierTargetAirPurifierState(): Promise<boolean>;
    updateAirPurifierLockPhysicalControl(): Promise<boolean>;
    updateAirPurifierRotationSpeed(): Promise<boolean>;
    updateFilterMaintenance(): Promise<boolean>;
    updateAirQualitySensor(): Promise<void>;
    updateLED(): Promise<void>;
    updateCurrentTemperature(): Promise<boolean>;
    updateCurrentRelativeHumidity(): Promise<boolean>;
    updateCarbonDioxideSensor(): Promise<boolean>;
    handleAirPurifierActiveSet(state: any): Promise<void>;
    handleTargetAirPurifierSet(state: any): Promise<void>;
    handleLockPhysicalControlsSet(state: any): Promise<void>;
    handleRotationSpeedSet(value: any): Promise<void>;
    handleOnSet(state: any): Promise<void>;
    handleBrightnessSet(value: any): Promise<void>;
}
//# sourceMappingURL=platformAccessory.d.ts.map